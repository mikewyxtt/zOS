#!/usr/bin/env bash

set -e
export TARGET_ARCH=x86_64-unknown-none
export zOS_SRC_ROOT=$PWD
export zOS_VERSION="0.0.1"

APPS=("base/loader" "sys/zxt/drivers/hello")


# Creates a memstick image
memstick() {
	rm -Rf /tmp/zOS_build
	mkdir -p /tmp/zOS_build/rootfs /tmp/zOS_build/efi_sys RELEASE

	# Create 1.5GB disk image (307200 sectors)
	dd if=/dev/zero of=/tmp/zOS_build/memstick.img bs=512 count=3072000
	
	# Partition the disk image, then split it into two images for easy transfering of files
	# The following is literally mimicking the keystrokes needed to partition the disk using fdisk
	fdisk /tmp/zOS_build/memstick.img << EOF
g
n
1
2048
+512M
t
1

n
2
1050624
3071966
w
EOF


	########################################################################
	## Split it into two images so we can work with the partitions easily ##
	########################################################################
	dd if=/tmp/zOS_build/memstick.img of=/tmp/zOS_build/efi_sys.img bs=512 skip=2048 count=1048576
	dd if=/tmp/zOS_build/memstick.img of=/tmp/zOS_build/rootfs.img bs=512 skip=1050624 count=2021343

	################
	## Copy files ##
	################
	echo "Copying files..."

	# Here is where we would run 'cargo install' for every subproject in the system, then we can transfer the files to the rootfs

	# We format the partition and copy files onto it in the same go
	mkfs.ext2 -d /tmp/zOS_build/rootfs /tmp/zOS_build/rootfs.img


	########################
	## Install bootloader ##
	########################
	echo "Installing bootloader..."


	# Next we format the EFI system partition as FAT32 and copy over the UEFI version of 'loader'
	mkdosfs -F 32 /tmp/zOS_build/efi_sys.img
	mmd -i /tmp/zOS_build/efi_sys.img ::/EFI
	mmd -i /tmp/zOS_build/efi_sys.img ::/EFI/BOOT
	mcopy -i /tmp/zOS_build/efi_sys.img base/loader/target/x86_64-unknown-uefi/debug/loader.efi ::/EFI/BOOT/BOOTX64.EFI



	################################################
	## Combine the images back into one, clean up ##
	################################################
	dd if=/tmp/zOS_build/efi_sys.img of=/tmp/zOS_build/memstick.img bs=512 seek=2048 count=1048576 conv=notrunc
	dd if=/tmp/zOS_build/rootfs.img of=/tmp/zOS_build/memstick.img bs=512 seek=1050624 count=2021343 conv=notrunc
	mv /tmp/zOS_build/memstick.img RELEASE/zOS-RELEASE-0.1.0-LIVE-MEMSTICK.img
	rm -Rf /tmp/zOS_build
}

build() {
	for app in "${APPS[@]}"; do
		sh $app/pkgbuild.sh build
	done
}

clean() {
	for app in "${APPS[@]}"; do
		sh $app/pkgbuild.sh clean
	done
}

release() {
	memstick
}

usage() {
	echo "USAGE: ./build [clean|release]"
	exit 1
}


if [ $# -eq 0 ]; then
	build

elif [ $# -eq 1 ]; then
	if [ "$1" = "clean" ]; then
		clean

	elif [ "$1" = "release" ]; then
		release
	else
		echo "ERR: Invalid option: $1"
		usage
	fi
else
	usage
fi
